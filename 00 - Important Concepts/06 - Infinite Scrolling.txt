Infinite Scrolling

Infinite Scrolling is one of the methodology by which we can achieve Lazy Loading.
Lazy loading means the request for the resource or records will be made only when they are demanded.
In case of Infnite Scrolling, the request for the next set of records will be made only when scroll bar reaches bottom of th grid and fires request to load the next set of records.

1) Using react libraries - react-infinite-scroll-component

    import React, { useState, useEffect } from "react";
    import InfiniteScroll from "react-infinite-scroll-component";
    import axios from "axios";
    import ProductCard from "./ProductCard";
    import Loader from "./Loader";

    const InfiniteScrollExample1 = () => {
      const [items, setItems] = useState([]);
      const [hasMore, setHasMore] = useState(true);
      const [index, setIndex] = useState(2);

      useEffect(() => {
        axios
          .get("https://api.escuelajs.co/api/v1/products?offset=10&limit=12")
          .then((res) => setItems(res.data))
          .catch((err) => console.log(err));
      }, []);

      const fetchMoreData = () => {
        axios
          .get(`https://api.escuelajs.co/api/v1/products?offset=${index}0&limit=12`)
          .then((res) => {
            setItems((prevItems) => [...prevItems, ...res.data]);

            res.data.length > 0 ? setHasMore(true) : setHasMore(false);
          })
          .catch((err) => console.log(err));

        setIndex((prevIndex) => prevIndex + 1);
      };

      return (
        <InfiniteScroll
          dataLength={items.length}
          next={fetchMoreData}
          hasMore={hasMore}
          loader={<Loader />}
        >
          <div className='container'>
            <div className='row'>
              {items &&
                items.map((item) => <ProductCard data={item} key={item.id} />)}
            </div>
          </div>
        </InfiniteScroll>
      );
    };

    export default InfiniteScrollExample1;

2) Building a custom solution -

    import React, { useState, useEffect, useCallback } from "react";
    import axios from "axios";
    import ProductCard from "./ProductCard";
    import Loader from "./Loader";

    const InfiniteScrollExample2 = () => {
      const [items, setItems] = useState([]);
      const [isLoading, setIsLoading] = useState(false);
      const [index, setIndex] = useState(2);

      const fetchData = useCallback(async () => {
        if (isLoading) return;

        setIsLoading(true);

        axios
          .get(`https://api.escuelajs.co/api/v1/products?offset=${index}0&limit=12`)
          .then((res) => {
            setItems((prevItems) => [...prevItems, ...res.data]);
          })
          .catch((err) => console.log(err));
        setIndex((prevIndex) => prevIndex + 1);

        setIsLoading(false);
      }, [index, isLoading]);

      useEffect(() => {
        const getData = async () => {
          setIsLoading(true);
          try {
            const response = await axios.get(
              "https://api.escuelajs.co/api/v1/products?offset=10&limit=12"
            );
            setItems(response.data);
          } catch (error) {
            console.log(error);
          }
          setIsLoading(false);
        };

        getData();
      }, []);

      useEffect(() => {
        const handleScroll = () => {
          const { scrollTop, clientHeight, scrollHeight } =
            document.documentElement;
          if (scrollTop + clientHeight >= scrollHeight - 20) {
            fetchData();
          }
        };

        window.addEventListener("scroll", handleScroll);
        return () => {
          window.removeEventListener("scroll", handleScroll);
        };
      }, [fetchData]);

      return (
        <div className='container'>
          <div className='row'>
            {items.map((item) => (
              <ProductCard data={item} key={item.id} />
            ))}
          </div>
          {isLoading && <Loader />}
        </div>
      );
    };

    export default InfiniteScrollExample2;

3) Intersection Observer -

    import React, { useState, useEffect, useRef, useCallback } from "react";
    import axios from "axios";
    import ProductCard from "./ProductCard";
    import Loader from "./Loader";

    const InfiniteScrollExample3 = () => {
      const [items, setItems] = useState([]);
      const [isLoading, setIsLoading] = useState(false);
      const [index, setIndex] = useState(2);
      const loaderRef = useRef(null);

      const fetchData = useCallback(async () => {
        if (isLoading) return;

        setIsLoading(true);
        axios
          .get(`https://api.escuelajs.co/api/v1/products?offset=${index}0&limit=12`)
          .then((res) => {
            setItems((prevItems) => [...prevItems, ...res.data]);
          })
          .catch((err) => console.log(err));

        setIndex((prevIndex) => prevIndex + 1);

        setIsLoading(false);
      }, [index, isLoading]);

      useEffect(() => {
        const observer = new IntersectionObserver((entries) => {
          const target = entries[0];
          if (target.isIntersecting) {
            fetchData();
          }
        });

        if (loaderRef.current) {
          observer.observe(loaderRef.current);
        }

        return () => {
          if (loaderRef.current) {
            observer.unobserve(loaderRef.current);
          }
        };
      }, [fetchData]);

      useEffect(() => {
        const getData = async () => {
          setIsLoading(true);
          try {
            const response = await axios.get(
              "https://api.escuelajs.co/api/v1/products?offset=10&limit=12"
            );
            setItems(response.data);
          } catch (error) {
            console.log(error);
          }
          setIsLoading(false);
        };

        getData();
      }, []);

      return (
        <div className='container'>
          <div className='row'>
            {items.map((item, index) => (
              <ProductCard data={item} key={item.id} />
            ))}
          </div>
          <div ref={loaderRef}>{isLoading && <Loader />}</div>
        </div>
      );
    };

    export default InfiniteScrollExample3;
