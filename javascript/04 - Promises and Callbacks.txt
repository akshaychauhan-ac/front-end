Promises and Callbacks (async/await)

An object representing the eventual completion or failure of an asynchronous operation.
If there is an exception, the browser will look down the chain for .catch() handlers or onRejected.
The promise constructor takes an executor function that lets us resolve or reject a promise manually.
Promise.resolve() and Promise.reject() are shortcuts to manually create an already resolved or rejected promise respectively.
To avoid surprises, functions passed to then() will never be called synchronously, even with an already-resolved promise.
Instead of running immediately, the passed-in function is put on a microtask queue,
    which means it runs later (only after the function which created it exits,
    and when the JavaScript execution stack is empty), just before control is returned to the event loop.
Promise callbacks are handled as a Microtask whereas setTimeout() callbacks are handled as Task queues.
The .then() method takes up to two arguments; the first argument is a callback function for the resolved case of the promise, and the second argument is a callback function for the rejected case. Each .then() returns a newly generated promise object, which can optionally be used for chaining.

Example:
    const promise = new Promise(function(resolve, reject) {
        console.log("Promise callback");
        resolve();
    }).then(function(result) {
        console.log("Promise callback (.then)");
    });

    setTimeout(function() {
        console.log("event-loop cycle: Promise (fulfilled)", promise)
    }, 0);

    console.log("Promise (pending)", promise);

Promise.resolve()
    The Promise.resolve() method returns a Promise object that is resolved with a given value.
    Syntax -
        Promise.resolve(value);

Promise.reject()
    The Promise.reject() method returns a Promise object that is rejected with a given reason.
    Syntax -
        Promise.reject(reason);

Promise.prototype.then()
    Returns a Promise. It takes up to two arguments: callback functions for the success and failure cases of the Promise.
    Syntax -
        const promise1 = new Promise((resolve, reject) => {
            resolve('Success!');
        });

        promise1.then((value) => {
            console.log(value);
            // expected output: "Success!"
        });

Promise.prototype.catch()
    Same as Promise.prototype.then(undefined, onRejected).
    Syntax -
        const promise1 = new Promise((resolve, reject) => {
            throw 'Uh-oh!';
        });

        promise1.catch((error) => {
            console.error(error);
        });
        // expected output: Uh-oh!

Promise.prototype.finally()
    Runs in the end. No arguments.
    Syntax -
        function checkMail() {
            return new Promise((resolve, reject) => {
                if (Math.random() > 0.5) {
                    resolve('Mail has arrived');
                } else {
                    reject(new Error('Failed to arrive'));
                }
            });
        }
        checkMail().then((mail) => {
            console.log(mail);
        }).catch((err) => {
            console.error(err);
        }).finally(() => {
            console.log('Experiment completed');
        });

Promise.any()
    Returns first resolved promise, in case of rejection, it returns AggregateError: All promises were rejected. Accepts array (iterable).
    Syntax -
        const promise1 = Promise.reject(0);
        const promise2 = new Promise((resolve) => setTimeout(resolve, 100, 'quick'));
        const promise3 = new Promise((resolve) => setTimeout(resolve, 500, 'slow'));

        const promises = [promise1, promise2, promise3];

        Promise.any(promises).then((value) => console.log(value));

        // expected output: "quick"

Promise.race()
    Returns first resolved/rejected promise. Accepts array (iterable).
    Syntax -
        const promise1 = new Promise((resolve, reject) => {
            setTimeout(resolve, 500, 'one');
        });

        const promise2 = new Promise((resolve, reject) => {
            setTimeout(resolve, 100, 'two');
        });

        Promise.race([promise1, promise2]).then((value) => {
            console.log(value);
            // Both resolve, but promise2 is faster
        });
        // expected output: "two"

Promise.all()
    Returns array of resolved promises, in case of rejection, it returns reason of rejection only.
    Syntax -
        const promise1 = Promise.resolve(3);
        const promise2 = 42;
        const promise3 = new Promise((resolve, reject) => {
          setTimeout(resolve, 100, 'foo');
        });

        Promise.all([promise1, promise2, promise3]).then((values) => {
          console.log(values);
        });
        // expected output: Array [3, 42, "foo"]

Promise.allSettled()
    Returns array of all resolved/rejected promises.
    Syntax -
        const promise1 = Promise.resolve(3);
        const promise2 = new Promise((resolve, reject) => setTimeout(reject, 100, 'foo'));
        const promises = [promise1, promise2];

        Promise.allSettled(promises).
          then((results) => results.forEach((result) => console.log(result.status)));

        // expected output:
        // "fulfilled"
        // "rejected"

/******************************************************************************************************/

Async/await

Async simply allows us to write promises based code as if it was synchronous and it checks that we are not breaking the execution thread
Await function is used to wait for the promise. It makes the code wait until the promise returns a result. It only makes the async block wait.

The await expression causes async function execution to pause until a Promise is settled (that is, fulfilled or rejected), and to resume execution of the async function after fulfillment. When resumed, the value of the await expression is that of the fulfilled Promise.
If the Promise is rejected, the await expression throws the rejected value.
If the value of the expression following the await operator is not a Promise, it's converted to a resolved Promise.

const getData = async() => {
    var y = await "Hello World";
    console.log(y);
}
  
console.log(1);
getData();
console.log(2);
